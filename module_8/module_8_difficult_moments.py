def personal_sum(numbers):
    result = 0
    incorrect_data = 0

    for i_num in numbers:
        try:
            result += i_num
        except TypeError:
            print(f'Некорректный тип данных для подсчёта суммы - {i_num}')
            incorrect_data += 1

    return result, incorrect_data


def calculate_average(numbers):
    try:
        if not isinstance(numbers, (list, tuple, str)):
            raise TypeError("В numbers записан некорректный тип данных")

        total_sum, incorrect_data_count = personal_sum(numbers)
        valid_count = len(numbers) - incorrect_data_count

        arithmetic_mean = total_sum / valid_count if valid_count > 0 else 0
    except ZeroDivisionError:
        return 0
    except TypeError as exc:
        print(exc)
        return None

    return arithmetic_mean


# Примеры вызова функции calculate_average с различными данными
print(f'\nРезультат 1: {calculate_average("1, 2, 3")}\n')  # Строка перебирается, но каждый символ - строковый тип
print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}\n')  # Учитываются только 1 и 3
print(f'Результат 3: {calculate_average(567)}\n')  # Передана не коллекция
print(f'Результат 4: {calculate_average([42, 15, 36, 13])}\n')  # Всё должно работать



"""
Вывод на консоль:
Некорректный тип данных для подсчёта суммы - 1
Некорректный тип данных для подсчёта суммы - ,
Некорректный тип данных для подсчёта суммы -
Некорректный тип данных для подсчёта суммы - 2
Некорректный тип данных для подсчёта суммы - ,
Некорректный тип данных для подсчёта суммы -
Нкорректный тип данных для подсчёта суммы - 3

Результат 1: 0
Некорректный тип данных для подсчёта суммы - Строка
Некорректный тип данных для подсчёта суммы - Ещё Строка

Результат 2: 2.0
В numbers записан некорректный тип данных
Результат 3: None
Результат 4: 26.5



Функция calculate_average(numbers)
Среднее арифметическое - сумма всех данных делённая на их количество.
Должна принимать коллекцию numbers и возвращать: среднее арифметическое всех чисел.
Внутри для подсчёта суммы используйте функцию personal_sum написанную ранее.
Т.к. коллекция numbers может оказаться пустой,
то обработайте исключение ZeroDivisionError при делении на 0 и верните 0.
Также в numbers может быть записана не коллекция,
а другие типы данных, например числа.
Обработайте исключение TypeError выводя строку 'В numbers записан некорректный тип данных'.
В таком случае функция просто вернёт None.

Функция personal_sum(numbers):

Должна принимать коллекцию numbers.
Подсчитывать сумму чисел в numbers путём перебора и увеличивать переменную result.
Если же при переборе встречается данное типа отличного от числового, то обработать исключение TypeError,
увеличив счётчик incorrect_data на 1.
В конечном итоге функция возвращает кортеж из двух значений:
result - сумма чисел, incorrect_data - кол-во некорректных данных.



Пункты задачи:

Создайте функцию personal_sum на основе условий задачи.
Создайте функцию calculate_average на основе условий задачи.
Вызовите функцию calculate_average несколько раз, передав в неё данные разных вариаций.
Пример результата выполнения программы:

Пример выполнения программы:

print(f'Результат 1: {calculate_average("1, 2, 3")}') # Строка перебирается, но каждый символ - строковый тип

print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}') # Учитываются только 1 и 3

print(f'Результат 3: {calculate_average(567)}') # Передана не коллекция

print(f'Результат 4: {calculate_average([42, 15, 36, 13])}') # Всё должно работать





"""